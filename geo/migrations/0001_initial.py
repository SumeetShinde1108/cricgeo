# Generated by Django 5.2.7 on 2025-10-07 03:39

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='IngestionEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('source', models.CharField(max_length=120)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='pending', max_length=32)),
                ('items_processed', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pitch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(default='Main', max_length=120)),
                ('area', django.contrib.gis.db.models.fields.PolygonField(blank=True, geography=True, null=True, srid=4326)),
                ('centroid', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('length_m', models.FloatField(blank=True, null=True)),
                ('width_m', models.FloatField(blank=True, null=True)),
                ('surface_type', models.CharField(choices=[('grass', 'Grass'), ('dry', 'Dry'), ('dusty', 'Dusty'), ('green', 'Green Top'), ('artificial', 'Artificial')], default='grass', max_length=32)),
                ('preferred_usage', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('first_name', models.CharField(max_length=80)),
                ('last_name', models.CharField(blank=True, max_length=80, null=True)),
                ('jersey_no', models.PositiveIntegerField(blank=True, null=True)),
                ('role', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('country', models.CharField(blank=True, max_length=80, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Inning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField()),
                ('overs', models.PositiveSmallIntegerField(default=0)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='innings', to='geo.match')),
                ('batting_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='batting_innings', to='geo.team')),
                ('bowling_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bowling_innings', to='geo.team')),
            ],
        ),
        migrations.CreateModel(
            name='Over',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField()),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('inning', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='over_set', to='geo.inning')),
                ('bowler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geo.player')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='pitch',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches', to='geo.pitch'),
        ),
        migrations.CreateModel(
            name='CameraImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('acquired_at', models.DateTimeField(db_index=True)),
                ('footprint', django.contrib.gis.db.models.fields.PolygonField(geography=True, srid=4326)),
                ('provider', models.CharField(max_length=80)),
                ('file_url', models.CharField(blank=True, max_length=1024, null=True)),
                ('image_file', models.FileField(upload_to='camera_images/')),
                ('view_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('pitch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='geo.pitch')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PitchSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=120, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('soil_moisture', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('temperature_c', models.FloatField(blank=True, null=True)),
                ('grass_cover_pct', models.FloatField(blank=True, null=True)),
                ('ndvi', models.FloatField(blank=True, null=True)),
                ('hardness', models.FloatField(blank=True, null=True)),
                ('predicted_condition', models.CharField(blank=True, choices=[('batting_friendly', 'Batting friendly'), ('bowling_friendly', 'Bowling friendly'), ('balanced', 'Balanced')], max_length=32, null=True)),
                ('predicted_confidence', models.FloatField(blank=True, null=True)),
                ('measure_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('pitch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='geo.pitch')),
            ],
            options={
                'ordering': ['-timestamp'],
                'get_latest_by': 'timestamp',
            },
        ),
        migrations.CreateModel(
            name='PitchAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_name', models.CharField(max_length=120)),
                ('model_version', models.CharField(blank=True, max_length=50, null=True)),
                ('prediction', models.CharField(max_length=120)),
                ('confidence', models.FloatField(blank=True, null=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('snapshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='geo.pitchsnapshot')),
            ],
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('ball_in_over', models.PositiveSmallIntegerField()),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('pitch_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('impact_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('landing_distance', models.FloatField(blank=True, null=True)),
                ('speed_kmph', models.FloatField(blank=True, null=True)),
                ('spin_rpm', models.FloatField(blank=True, null=True)),
                ('outcome', models.CharField(blank=True, max_length=120, null=True)),
                ('over', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='geo.over')),
                ('batsman', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='batting_deliveries', to='geo.player')),
                ('bowler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bowling_deliveries', to='geo.player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerTrackPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326)),
                ('speed', models.FloatField(blank=True, null=True)),
                ('heading', models.FloatField(blank=True, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_points', to='geo.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_points', to='geo.player')),
            ],
        ),
        migrations.CreateModel(
            name='SatelliteImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('acquired_at', models.DateTimeField(db_index=True)),
                ('footprint', django.contrib.gis.db.models.fields.PolygonField(geography=True, srid=4326)),
                ('provider', models.CharField(max_length=80)),
                ('file_url', models.CharField(blank=True, max_length=1024, null=True)),
                ('product_id', models.CharField(blank=True, max_length=200, null=True)),
                ('derived_indices', models.JSONField(blank=True, null=True)),
                ('pitch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='geo.pitch')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SensorDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('uid', models.CharField(max_length=120, unique=True)),
                ('label', models.CharField(blank=True, max_length=120, null=True)),
                ('device_type', models.CharField(choices=[('soil_moisture', 'Soil Moisture'), ('temperature', 'Temperature'), ('humidity', 'Humidity'), ('ndvi', 'NDVI'), ('hardness', 'Hardness')], max_length=80)),
                ('installed_at', models.DateTimeField(blank=True, null=True)),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True)),
                ('pitch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='devices', to='geo.pitch')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('value', models.FloatField()),
                ('unit', models.CharField(blank=True, max_length=32, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='geo.sensordevice')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SoilSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_payload', models.JSONField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('taken_at', models.DateTimeField()),
                ('sample_point', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('organic_matter_pct', models.FloatField(blank=True, null=True)),
                ('nitrogen_mgkg', models.FloatField(blank=True, null=True)),
                ('phosphorus_mgkg', models.FloatField(blank=True, null=True)),
                ('potassium_mgkg', models.FloatField(blank=True, null=True)),
                ('lab_report', models.FileField(blank=True, null=True, upload_to='soil_reports/')),
                ('pitch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_samples', to='geo.pitch')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Stadium',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, geography=True, null=True, srid=4326)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('city', models.CharField(blank=True, max_length=120, null=True)),
                ('country', models.CharField(blank=True, max_length=80, null=True)),
                ('capacity', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['slug'], name='geo_stadium_slug_8f295d_idx')],
            },
        ),
        migrations.AddField(
            model_name='pitch',
            name='stadium',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pitches', to='geo.stadium'),
        ),
        migrations.AddField(
            model_name='match',
            name='stadium',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches', to='geo.stadium'),
        ),
        migrations.CreateModel(
            name='StadiumFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=80)),
                ('value', models.CharField(max_length=255)),
                ('stadium', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='geo.stadium')),
            ],
        ),
        migrations.AddField(
            model_name='player',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players', to='geo.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='teams',
            field=models.ManyToManyField(related_name='matches', to='geo.team'),
        ),
        migrations.CreateModel(
            name='PitchMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(db_index=True)),
                ('avg_soil_moisture', models.FloatField(blank=True, null=True)),
                ('avg_ndvi', models.FloatField(blank=True, null=True)),
                ('avg_grass_cover', models.FloatField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('pitch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='geo.pitch')),
            ],
            options={
                'unique_together': {('pitch', 'date')},
            },
        ),
        migrations.AddIndex(
            model_name='pitchsnapshot',
            index=models.Index(fields=['pitch', 'timestamp'], name='geo_pitchsn_pitch_i_eab515_idx'),
        ),
        migrations.AddIndex(
            model_name='pitchanalysis',
            index=models.Index(fields=['model_name', 'created_at'], name='geo_pitchan_model_n_589628_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='over',
            unique_together={('inning', 'number')},
        ),
        migrations.AddIndex(
            model_name='delivery',
            index=models.Index(fields=['timestamp'], name='geo_deliver_timesta_2690b4_idx'),
        ),
        migrations.AddIndex(
            model_name='playertrackpoint',
            index=models.Index(fields=['match', 'player', 'timestamp'], name='geo_playert_match_i_9f41e6_idx'),
        ),
        migrations.AddIndex(
            model_name='sensorreading',
            index=models.Index(fields=['device', 'timestamp'], name='geo_sensorr_device__d170b1_idx'),
        ),
        migrations.AddIndex(
            model_name='pitch',
            index=models.Index(fields=['stadium', 'name'], name='geo_pitch_stadium_2a600b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stadiumfeature',
            unique_together={('stadium', 'key')},
        ),
        migrations.AlterUniqueTogether(
            name='inning',
            unique_together={('match', 'number')},
        ),
    ]
